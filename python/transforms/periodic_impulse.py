"""
    A playarea for the PeriodicImpulse transform
"""
import argparse
import logging

import datetime
from datetime import datetime as dt

import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions
from apache_beam.transforms.periodicsequence import PeriodicImpulse

class GetWindowData(beam.DoFn):
    def process(self, element, window = beam.DoFn.WindowParam):
        yield (element, (window.start,window.end))

def run(known_args: dict, pipeline_args: dict):
    """
        Main pipeline
    """
    pipeline_options = PipelineOptions(pipeline_args)
    interval = known_args.interval
    total_seconds = known_args.total_seconds
    apply_windowing = known_args.apply_windowing

    # NOTE: For PeriodicImpulse, timestamps in the past are generated immediately.
    # Timestamps in the future are generated as time passes.

    # NOTE: Windowing with PeriodicImpulse - generated elements are already
    # timestamped. When apply_windowing is True, generated elements are assigned
    # to fixed windows of size fire_interval. If not, generated elements are
    # assigned to the global window.

    # Ensure that this is in the past so timestamps generate immediately.
    start_time = int(dt.timestamp(dt.now())) - total_seconds
    end_time = start_time + total_seconds
    logging.info(f"start_time = {start_time}")
    logging.info(f"end_time = {end_time}")
    logging.info(f"interval = {interval}")

    with beam.Pipeline(options = pipeline_options) as p:
        data = (p
            | PeriodicImpulse(                              # Periodically generate an integer
                    start_timestamp = start_time            # starting this timestamp
                    ,stop_timestamp = end_time              # stopping at this timestamp
                    ,fire_interval = interval               # every this many seconds
                    ,apply_windowing = apply_windowing      # and assign to windows if True
                )
            | beam.ParDo(GetWindowData())
            | beam.Map(logging.info))
        
if __name__ == '__main__':
    fmt = "%(asctime)s.%(msecs)03d: %(message)s"
    datefmt = "%Y-%m-%d %H:%M:%S"
    logging.basicConfig(format = fmt, level = logging.INFO, datefmt = datefmt)

    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--interval'
        ,type = int
        ,default = 3
        ,help = "Number of seconds in between firing")
    parser.add_argument(
        '--total_seconds'
        ,type = int
        ,default = 11
        ,help = "Number of total seconds to fire")
    known_args, pipeline_args = parser.parse_known_args()
    parser.add_argument(
        '--apply_windowing'
        ,action = "store_true"
        ,help = "Assign windows to elements generated by PeriodicImpulse")
    known_args, pipeline_args = parser.parse_known_args()

    logging.info(f"known_args = {known_args}")
    logging.info(f"pipeline_args = {pipeline_args}")
    run(known_args, pipeline_args)